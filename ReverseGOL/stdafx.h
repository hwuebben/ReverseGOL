// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently, but
// are changed infrequently
//

#pragma once

#include "targetver.h"

#include <stdio.h>
#include <tchar.h>
#include<map>
#include <vector>
#include<list>

//namespace AlphabetBoards {

	//const int boardSize = 14;

	/* 10x 10:
	H: [{"1":[1, 2, 7, 8]}, { "2":[1,2,7,8] }, { "4":[1,4,5,8] }, { "5":[1,2,4,5,7,8] }, { "7":[1,8] }, { "8":[1,2,7,8] }]



	12x12:
	H: [{%223%22:[1,2,3,4,7,8,9,10]},{%226%22:[1,2,3,4,5,6,7,8,9,10]},{%228%22:[5,6]},{%229%22:[1,2,3,4,5,6,7,8,9,10]},{%2210%22:[5,8]},{%2211%22:[3,6,9,11]}]

	14x14:
	H: [{"4":[2,3,4,5,8,9,10,11]},{"7":[2,3,4,5,6,7,8,9,10,11]},{"9":[6,7]},{"10":[2,3,4,5,6,7,8,9,10,11]},{"11":[6,9]},{"12":[4,7,10,12]}]
	A: [{"4":[3,4,5,6,7,8,9,10]},{"5":[4,11]},{"6":[7]},{"7":[2,3,5,6,8,9,10]},{"8":[4,9]},{"9":[6,7]},{"10":[2,4,5,6,7,8,10,11]},{"11":[4,7,9]},{"12":[3,4,5,6,7,8,9,10,11]},{"13":[2,4,5,8,9]}]
	L: [{"4":[2,3,4,5]},{"7":[2,3,4,5]},{"10":[2,3,4,5,6,7,8,9,10,11]},{"12":[4,7,10,12]}]
	O: [{"4":[3,4,5,6,7,8,9,10]},{"5":[4,11]},{"6":[6,7]},{"7":[2,4,5,6,7,8,9,10]},{"8":[4,9]},{"9":[1,5,6]},{"10":[2,4,7,8,10,11]},{"11":[1,2,3,8]},{"12":[0,2,3,4,5,6,7,8,9,10,12]},{"13":[4,5,7,8]}]
	W: [{"3":[10]},{"4":[2,3,4,5,9,10]},{"5":[9]},{"6":[7,8]},{"7":[2,3,4,5,7,9,11]},{"8":[10,13]},{"9":[7,8,11,12]},{"10":[2,3,4,5,6,8,11,12,13]},{"11":[0,1,2,3,6,7,10,11,12,13]},{"12":[2,3,4,5,6,7,8,9,10,11,12]},{"13":[4,5,7,8,10,11,13]}]
	E: [{"4":[2,3,4,5,6,7,8,9,10,11]},{"6":[6,9,10,12]},{"7":[2,3,4,5,7,8,9,10,11]},{"8":[9,11,13]},{"9":[10,12]},{"10":[2,3,4,5,6,7,8,12,13]},{"11":[7,10,11,12,13]},{"12":[4,7,12]},{"13":[13]}]
	T: [{"4":[2,3,4,5,6,7,8,9,10,11]},{"6":[2,3,4,9,10,12]},{"7":[0,1,2,3,4,5,6,7,8,9,10,11]},{"8":[2,4,9,11,13]},{"9":[3,10,12]},{"10":[2,3,4,5,6,7,8,9,11,12,13]},{"11":[2,3,4,5,8,9,12,13]},{"12":[3,9,10,11,12]},{"13":[3,8,10,11,13]}]

	*/
	/*

	bool boardA[boardSize][boardSize] = {
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,1,1,1,1,1,1,0,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
	};

	bool boardE[boardSize][boardSize] = {
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
	{ 0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
	};


	bool boardW[boardSize][boardSize] = {
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,1,1,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,1,1,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,1,1,0,1,1,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,0,1,1,0,0,1,1,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
	};


	bool boardO[boardSize][boardSize] = {
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,1,1,1,1,1,1,0,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,0,1,1,1,1,1,1,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
	};

	bool boardL[boardSize][boardSize] = {
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
	};
	*/
	/*
		static class Alphabet {
		public:
			std::map <int, std::vector<int>>  solH = { { 4, std::vector<int>({ 2,3,4,5,8,9,10,11 }) },{ 7, std::vector<int>({ 2,3,4,5,6,7,8,9,10,11 }) },{ 9, std::vector<int>({ 6,7 }) },{ 10, std::vector<int>({ 2,3,4,5,6,7,8,9,10,11 }) },{ 11, std::vector<int>({ 6,9 }) },{ 12, std::vector<int>({ 3,4,5,6,7,8,9,10,11 }) },{ 13, std::vector<int>({ 4,5,7,8,10,11,13 }) } };
			std::map <int, std::vector<int>>  solA = { { 4, std::vector<int>({ 3, 4, 5, 6, 7, 8, 9, 10 }) },{ 5, std::vector<int>({ 4,11 }) },{ 6, std::vector<int>({ 7 }) } ,{ 7, std::vector<int>({ 2,3,5,6,8,9,10 }) } ,{ 8, std::vector<int>({ 4,9 }) },{ 9,std::vector<int>({ 6,7 }) },{ 10,std::vector<int>({ 2,4,5,6,7,8,10,11 }) },{ 11,std::vector<int>({ 4,7,9 }) },{ 12,std::vector<int>({ 3,4,5,6,7,8,9,10,11 }) },{ { 13 },std::vector<int>({ 2,4,5,8,9 }) } };
			std::map <int, std::vector<int>>  solL = { { 4, std::vector<int>({ 2,3,4,5 }) },{ 7, std::vector<int>({ 2,3,4,5 }) },{ 10, std::vector<int>({ 2,3,4,5,6,7,8,9,10,11 }) },{ 12, std::vector<int>({ 4,7,10,12 }) } };
			std::map <int, std::vector<int>>  solO = { { 4, std::vector<int>({}) },{ 5, std::vector<int>({}) },{ 6, std::vector<int>({}) },{ 7, std::vector<int>({}) },{ 8, std::vector<int>({}) },{ 9, std::vector<int>({}) },{ 10, std::vector<int>({}) },{ 11, std::vector<int>({}) },{ 12, std::vector<int>({}) },{ 13, std::vector<int>({}) },{ 14, std::vector<int>({}) } };
			std::map <int, std::vector<int>>  solW = { { 4, std::vector<int>({}) },{ 5, std::vector<int>({}) } };
			std::map <int, std::vector<int>>  solE = { { 4, std::vector<int>({}) },{ 5, std::vector<int>({}) } };
			std::map <int, std::vector<int>>  solT = { { 4, std::vector<int>({}) },{ 5, std::vector<int>({}) } };
*/
/*
			extern bool boardA[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,1,1,1,1,1,1,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};

			extern bool boardE[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};


			extern bool boardW[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,1,1,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,1,1,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,1,1,0,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,0,1,1,0,0,1,1,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};


			extern bool boardO[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,1,1,1,1,1,1,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,0,1,1,1,1,1,1,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};

			extern bool boardL[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};

			extern bool boardH[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};

			extern bool boardR[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};

			extern bool boardD[boardSize][boardSize] = {
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,0,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,0,0,0,0,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,1,0,0,0 },
				{ 0,0,0,1,1,1,1,1,1,1,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
				{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
			};
			*/
//		};
